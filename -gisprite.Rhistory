summarise(n = n(),
`mean confidence in\ncorrect answers` = mean(conf_correct),
`mean confidence in incorrect answers` = mean(conf_incorrect)
)
# tabulate
conf_compare %>%
group_by(trueconf) %>%
summarise(n = n(),
`mean confidence in\ncorrect answers` = mean(conf_correct),
`mean confidence in incorrect answers` = mean(conf_incorrect)
) %>%
kable() %>%
kable_styling()
# substantive answers
# a subset of only those who took the KQ, and only substantive answers
KQsubset <- d02 %>%
filter(h1kq1a != 7) %>%
select(matches("h1k.*a")) %>%
data.frame()
# correct responses
correct <- c(2, 1, 2, 2, 2, 2, 2, 1, 2, 2)
names(correct) <- names(KQsubset)
# sweep is an efficient way to mark the answers correct
correct_answers <- as_tibble(
data.frame(
sweep(x = KQsubset,
MARGIN = 2,
STATS = correct,
FUN = "==")))
# make a data frame from only our recoded confidences, convert to integer
conf_values <- kqc %>%
select(-c(aid, kqconfidence)) %>%
mutate_all(
list(
~ as.integer(.)
)
)
# if we multiply the "correct_answers" data frame by the confidence data frame
# we should get confidence values for only correct answers. We can the rowSums to get total
correct_conf <- (conf_values * correct_answers) %>%
mutate(
conf_correct = rowSums(., na.rm = TRUE))
# we will also multiply by the negation of correct answers
incorrect_conf <- (conf_values * !correct_answers) %>%
mutate(
conf_incorrect = rowSums(., na.rm = TRUE))
# column bind and select the total confidence scores and compare
conf_compare <-
correct_conf %>%
select(conf_correct) %>%
bind_cols(
incorrect_conf %>%
select(conf_incorrect)
) %>%
mutate(
`more confident in correct answers` = conf_correct > conf_incorrect)
# tabulate
conf_compare %>%
group_by(`more confident in correct answers`) %>%
summarise(n = n(),
`mean confidence in correct answers` = mean(conf_correct),
`mean confidence in incorrect answers` = mean(conf_incorrect)
) %>%
kable() %>%
kable_styling()
# substantive answers
# a subset of only those who took the KQ, and only substantive answers
KQsubset <- d02 %>%
filter(h1kq1a != 7) %>%
select(matches("h1k.*a")) %>%
data.frame()
# correct responses
correct <- c(2, 1, 2, 2, 2, 2, 2, 1, 2, 2)
names(correct) <- names(KQsubset)
# sweep is an efficient way to mark the answers correct
correct_answers <- as_tibble(
data.frame(
sweep(x = KQsubset,
MARGIN = 2,
STATS = correct,
FUN = "==")))
# make a data frame from only our recoded confidences, convert to integer
conf_values <- kqc %>%
select(-c(aid, kqconfidence)) %>%
mutate_all(
list(
~ as.integer(.)
)
)
# if we multiply the "correct_answers" data frame by the confidence data frame
# we should get confidence values for only correct answers. We can the rowSums to get total
correct_conf <- (conf_values * correct_answers) %>%
mutate(
conf_correct = rowSums(., na.rm = TRUE))
# we will also multiply by the negation of correct answers
incorrect_conf <- (conf_values * !correct_answers) %>%
mutate(
conf_incorrect = rowSums(., na.rm = TRUE))
# column bind and select the total confidence scores and compare
conf_compare <-
correct_conf %>%
select(conf_correct) %>%
bind_cols(
incorrect_conf %>%
select(conf_incorrect)
) %>%
mutate(
`more confident in correct answers` = conf_correct > conf_incorrect)
# tabulate
conf_compare %>%
group_by(`more confident in correct answers`) %>%
summarise(n = n(),
`mean confidence in correct answers` = mean(conf_correct) %>% round(1),
`mean confidence in incorrect answers` = mean(conf_incorrect) %>% round(1)
) %>%
kable() %>%
kable_styling()
library(captioner)
library(tidyverse)
library(magrittr)
library(knitr)
library(kableExtra)
figure_nums <- captioner(prefix = "Figure")
table_nums <- captioner(prefix = "Table")
d01 <-
structure(
list(
white = c(1L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 6L),
black = c(0L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L),
AI = c(0L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 8L),
asian = c(0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 1L),
raceother = c(0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 6L),
multirace = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
),
class = "data.frame",
row.names = c(NA, -10L)
) %>%
# mutate all columns
mutate_all(
# the mutate function is "case_when" to change values
#   anything other than 1 becomes NA
list(
~ case_when(
. == 1 ~ 1,
TRUE ~ as.numeric(NA))
)
) %>%
# # sum across all rows
mutate(
multirace = rowSums(., na.rm = TRUE)
)
d01 %>%
kable(caption = "Recoded example data frame") %>%
kable_styling(full_width = FALSE)
# locate the system temp dir. This will be the dirname of a dir created with tempdir().
# avoids OS dependency
mytempdir <- dirname(tempdir())
# the RDS file
ah1fname <- file.path(mytempdir, "AHwave1_v3.rds")
# download if necessary
if(!file.exists(ah1fname)){
# a URL
myurl <- "http://staff.washington.edu/phurvitz/csde502_winter_2021/data/AHwave1_v3.rds"
# download it
download.file(url = myurl,
destfile = ah1fname, quiet = TRUE)
}
# read into mem
d02 <- read_rds(ah1fname)
# run the pipeline
d03 <- d02 %>%
# pull the columns we want
select(aid,
white,
black,
AI,
asian,
raceother) %>%
# recode 6 and 8 to NA for all but aid
mutate_at(
.vars = vars(-aid),
# the mutate function is "case_when" to change values
#   any marked value (1) becomes TRUE
#   anything that was 6 or 8 becomes NA
#   anything else (0) becomes FALSE
#       we can sum, e.g., TRUE + FALSE + NA = 1 (if na.rm = TRUE)
#   using these as Booleans allows more straightforward `case_when' later.
list(
~ case_when(
. == 1 ~ TRUE,
. == 6 | . == 8 ~ NA,
TRUE ~ FALSE)
)
) %>%
# row sums
mutate(
numraces = rowSums(select(., -aid), na.rm = TRUE)
) %>%
# classify multirace
mutate(multirace =
#   1 = one race, White
# 	2 = one race, not White
# 	3 = two races, includes White
# 	4 = two races, both non-White
# 	5 = three or more races, includes White
# 	6 = three or more races, all non-White
# 	9 = any race missing (White, Black/African American, American Indian, Asian, other)
case_when(
numraces == 1 & white  ~ 1,
numraces == 1 & !white ~ 2,
numraces == 2 & white  ~ 3,
numraces == 2 & !white ~ 4,
numraces >= 3 & white  ~ 5,
numraces >= 3 & !white ~ 6,
TRUE ~ 9
)
)
## verify
# d03_m4 <- d03 %>% filter(multirace==4)
# View(d03_m4)
#
# d02 %>% select(aid, white, black, AI, asian, raceother) %>% filter(aid %in% d03_m4$aid)
attributes(d03$multirace)$label <- "A variable to represent race combinations:
1 = one race, White
2 = one race, not White
3 = two races, includes White
4 = two races, both non-White
5 = three or more races, includes White
6 = three or more races, all non-White
9 = any race missing (White, Black/African American, American Indian, Asian, other)"
labels_multirace <- c(
"one race: White" = 1,
"one race: not White" = 2,
"two races: includes White" = 3,
"two races: both non-White" = 4,
"three or more races: includes White" = 5,
"three or more races: all non-White" = 6,
"any race missing" = 9)
attributes(d03$multirace)$labels <- labels_multirace
d03$multirace <- factor(d03$multirace,
levels = labels_multirace,
labels = labels_multirace %>% names())
d03 %>%
group_by(multirace) %>%
summarise(n = n()) %>%
mutate(
`%` = round(n / sum(n) * 100, 1)
) %>%
kable(caption = "Tabulation of `multirace` variable") %>%
kable_styling(full_width = FALSE, position = "left")
d03 %>%
group_by(numraces) %>%
summarise(n = n()) %>%
mutate(
`%` = round(n / sum(n) * 100, 1)
) %>%
kable(caption = "Tabulation of number of marked races") %>%
kable_styling(full_width = FALSE, position = "left")
# pull the same filter and select but no recoding for checking later
kqc0 <- d02 %>%
# select only those columns that are confidence from the Knowldge Quiz
select(matches("aid|h1kq.*b$")) %>%
# drop records with value of 7
filter(h1kq1b != 7) %>%
data.frame()
# the pipeline
kqc <- d02 %>%
# select only those columns that are confidence from the Knowldge Quiz
select(matches("aid|h1kq.*b$")) %>%
# drop records with value of 7
filter(h1kq1b != 7) %>%
# convert to numeric everything but aid by using ".vars = vars(-(aid))"
mutate_at(
.vars = vars(-aid),
list(
~ as.numeric(.)
)
) %>%
# recode 5, 8, 9 as NA
# reorder the others by subtracting from 4
# ignore aid
mutate_at(
.vars = vars(-aid),
list (
~ case_when(
as.numeric(.) %in% c(6, 8, 9) ~ as.numeric(NA),
TRUE ~ 4 - .
)
)
) %>%
# run the rowSums. We can ignore aid by using an inline "select"
mutate(kqconfidence =
rowSums(select(., -aid),
na.rm = TRUE))
# create the label
attributes(kqc$kqconfidence)$label = "A summary of confidence of correct answers in the Add Health Knowledge Quiz. For each individual question, original scores of 1-4 (high to low) were recoded to 0-3 (low to high), and summed across the 10 questions."
# update the labels
newlabels <- c(
"(0) Not at all" = 0,
"(1) Slightly" = 1,
"(2) Moderately" = 2,
"(3) Very" = 3
)
# update the value labels
kqc %<>%
mutate_at(.vars = vars(-kqconfidence, -aid),
list(
~ labelled::labelled(x = ., labels = newlabels)
)
)
kqc %>% group_by(kqconfidence) %>%
summarise(n = n()) %>%
mutate(
`cumulative sum` = cumsum(n),
`%` = round(n / sum(n) * 100, 1),
`cumulative %`  = cumsum(`%`)) %>%
kable(caption = "Distribution of overall confidence in Knowledge Quiz answers") %>%
kable_styling(full_width = FALSE, position = "left")
attributes(d02$h1kq1a)$labels %>% t() %>% t()
# pull and don't mutate for comparisin
kkq0 <- d02 %>%
# drop under 15 y
filter(h1kq1b != 7) %>%
# create a data frame of the component questions
select(matches("aid|h1kq.*a$")) %>%
data.frame()
kkq <- d02 %>%
# drop under 15 y
filter(h1kq1b != 7) %>%
# create a data frame of the component questions
select(matches("aid|h1kq.*a$")) %>%
# convert missings to 1 and others to zero
mutate_at(
.vars = vars(-aid),
list(
~ case_when(
. > 2 ~ 1,
TRUE ~ 0
)
)
) %>%
# rowSums of missings
mutate(`count of missing values` =
rowSums(select(., -aid)))
# tabulate
kkq %>% group_by(`count of missing values`) %>%
summarise(n = n()) %>%
mutate(
`cumulative sum` = cumsum(n),
`%` = round(n / sum(n) * 100, 1),
`cumulative %`  = cumsum(`%`)) %>%
kable(caption = "Distribution of total missing values") %>%
kable_styling(full_width = FALSE, position = "left")
# correct responses
correct <- c(2, 1, 2, 2, 2, 2, 2, 1, 2, 2)
# substantive answers
# a subset of only those who took the KQ, and only substantive answers
KQsubset <- d02 %>%
filter(h1kq1a != 7) %>%
select(matches("aid|h1k.*a")) %>%
data.frame()
# tdrop aid and ranspose
KQans <- KQsubset %>%
select(-aid) %>%
t()
# compare, transpose, and make a data frame
# rowSum for total correct
KQcorrect <- (KQans == correct) %>%
t(.) %>%
data.frame %>%
mutate(
ncorrect = rowSums(.),
aid = KQsubset %>%
pull(aid)
) %>%
select(aid, ncorrect, everything())
# join with kqconfidence
KQcorrect_confidence <-
KQcorrect %>%
left_join(kqc, by = "aid")
KQcorrect_confidence %>%
# summarise by sum correct
group_by(ncorrect) %>%
summarise(`mean confidence` = mean(kqconfidence) %>% round(1))
kable(caption = "Mean confidence by count of correct answers to the Knowledge Quiz") %>%
kable_styling(full_width = FALSE, position = "left")
# tabulate
conf_compare %>%
group_by(`more confident in correct answers`) %>%
summarise(n = n(),
`mean confidence in correct answers` = mean(conf_correct) %>% round(1),
`mean confidence in incorrect answers` = mean(conf_incorrect) %>% round(1)
)
conf_compare
# tabulate
conf_compare %>%
group_by(`more confident in correct answers`) %>%
summarise(n = n(),
`mean confidence in correct answers` = mean(conf_correct) %>% round(1),
`mean confidence in incorrect answers` = mean(conf_incorrect) %>% round(1)
)
colnames(conf_compare2) <- c(
"trueconf",
"n",
"mcc",
"mci")
# change the column names
conf_compare2 <- conf_compare
colnames(conf_compare2) <- c(
"trueconf",
"n",
"mcc",
"mci")
names(conf_compare2)
# tabulate
conf_compare %>%
group_by(`more confident in correct answers`) %>%
summarise(n = n(),
`mean confidence in correct answers` = mean(conf_correct) %>% round(1),
`mean confidence in incorrect answers` = mean(conf_incorrect) %>% round(1)
)
# tabulate
conf_compare_sum <- conf_compare %>%
group_by(`more confident in correct answers`) %>%
summarise(n = n(),
`mean confidence in correct answers` = mean(conf_correct) %>% round(1),
`mean confidence in incorrect answers` = mean(conf_incorrect) %>% round(1)
)
# print the table
conf_compare_sum %>%
kable(caption = "Comparison of overall confidence by correct or incorrect answers") %>%
kable_styling(full_width = FALSE, position = "left")
colnames(conf_compare_sum2) <- c(
"trueconf",
"n",
"mcc",
"mci")
# change the column names
conf_compare_sum2 <- conf_compare_sum
colnames(conf_compare_sum2) <- c(
"trueconf",
"n",
"mcc",
"mci")
conf_compare_sum2 %>% filter(trueconf) %>% pull(mci)
attributes(d02$h1kq1a)$labels %>% t() %>% t()
attributes(d02$h1kq1a)$labels %>% t() %>% t() %>% write.table()
attributes(d02$h1kq1a)$labels %>% t() %>% t() %>% write_delim()
attributes(d02$h1kq1a)$labels %>% t() %>% t() %>% write_delim(.)
attributes(d02$h1kq1a)$labels %>% t() %>% t() %>% write.table(sep = "\t")
head(mydat)
dat <- haven::read_dta("http://staff.washington.edu/phurvitz/csde502_winter_2021/data/AHwave1_v1.dta")
mydat <- dat %>%
filter(h1kq1a != 7) %>%
select(
aid,
matches("h1kq.*a")
)
head(mydat)
correct
ans_sweep <- mydat %>%
select(-aid) %>%
sweep(x = ., MARGIN = 2, STATS = correct, FUN = "==")
head(ans_sweep)
ans_sweep <- mydat %>%
#select(-aid) %>%
sweep(x = select(., -aid), MARGIN = 2, STATS = correct, FUN = "==")
ans_sweep <- mydat %>%
select(-aid) %>%
sweep(x = ., MARGIN = 2, STATS = correct, FUN = "==") %>%
select(aid = mydat$aid, everything())
ans_sweep <- mydat %>%
select(-aid) %>%
sweep(x = ., MARGIN = 2, STATS = correct, FUN = "==") %>%
mutate(aid = mydat$aid) %>%
select(aid, everything())
ans_sweep <- mydat %>%
select(-aid) %>%
sweep(x = ., MARGIN = 2, STATS = correct, FUN = "==") %>%
data.frame() %>%
mutate(aid = mydat$aid) %>%
select(aid, everything())
head(ans_sweep)
?sweep
# strip the ID column and transpose
z <- mydat %>%
select(-1) %>%
t()
# compare, transpose, and make a data frame
ans_tranpose <- (z == correct) %>%
t(.) %>%
data.frame()
head(ans_tranpose)
ans_sweep <- mydat %>%
# drop the aid column
select(-aid) %>%
# run the wweep
sweep(x = ., MARGIN = 2, STATS = correct, FUN = "==") %>%
# convert to data frame
data.frame()
identical(ans_sweep, ans_tranpose)
t0 <- Sys.time()
ans_sweep <- mydat %>%
# drop the aid column
select(-aid) %>%
# run the wweep
sweep(x = ., MARGIN = 2, STATS = correct, FUN = "==") %>%
# convert to data frame
data.frame()
t1 <- Sys.time()
runtime_sweep <- difftime(t1, t0, units = "secs") %>% as.numeric() %>% round(3)
runtime_sweep
